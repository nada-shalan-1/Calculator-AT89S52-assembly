	ORG 00H
	
	NEW_NUM_FLAG EQU P2.7 
	FIRST_DIG_FLAG EQU P2.6 
	RS EQU P2.1 
	E EQU P2.2 

	
	
	MOV R0, #38H     	
	ACALL COMMAND    	
	MOV R0, #0EH   		
	ACALL COMMAND    	
	MOV R0, #80H   		
	ACALL COMMAND  		
	MOV R0, #01H     	
	ACALL COMMAND		
	
	MOV R4, #00H   		
	MOV P2, #00H		
	MOV P3, #0FEH		 
	MOV R3, #00H		
	MOV R1, #00H		
	MOV R2, #'+'		
L1:	
	JNB P3.0, C1		
	JNB P3.1, C2		
	JNB P3.2, C3		
	JNB P3.3, C4		
	SJMP L1			
	
C1:	JNB P3.4, JBOT_ON		
	JNB P3.5, JBOT_ZERO	
	JNB P3.6, JBOT_EQUAL	
	JNB P3.7, JBOT_PLUS	
	SETB P3.0			
	CLR P3.1			
	SJMP L1				
	

C2:	JNB P3.4, JBOT_1		
	JNB P3.5, JBOT_2		
	JNB P3.6, JBOT_3		
	JNB P3.7, JBOT_MINUS	
	SETB P3.1			
	CLR P3.2			
	SJMP L1				
	
C3:	JNB P3.4, JBOT_4		
	JNB P3.5, JBOT_5		
	JNB P3.6, JBOT_6		
	JNB P3.7, JBOT_MUL	
	SETB P3.2			
	CLR P3.3			
	SJMP L1				

C4:	JNB P3.4, JBOT_7		
	JNB P3.5, JBOT_8		
	JNB P3.6, JBOT_9		
	JNB P3.7, JBOT_DIV	
	SETB P3.3			
	CLR P3.0			
	LJMP L1				

JBOT_ON: LJMP BOT_ON		
JBOT_ZERO: LJMP BOT_ZERO		
JBOT_1: LJMP BOT_1			
JBOT_2: LJMP BOT_2			
JBOT_3: LJMP BOT_3			
JBOT_4: LJMP BOT_4			
JBOT_5: LJMP BOT_5			
JBOT_6: LJMP BOT_6			
JBOT_7: LJMP BOT_7			
JBOT_8: LJMP BOT_8			
JBOT_9: LJMP BOT_9			
JBOT_PLUS: LJMP BOT_PLUS		
JBOT_MINUS: LJMP BOT_MINUS		
JBOT_MUL: LJMP BOT_MUL		
JBOT_DIV: LJMP BOT_DIV	
JBOT_EQUAL: LJMP BOT_EQUAL		

BOT_ON: 	SETB P2.0	
		LJMP L1		

BOT_ZERO: 	MOV R0, #'0'		
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_EQUAL: 	MOV R0, #'='			
		ACALL DISPLAY	
		ACALL RESULT	
		N: MOV 62,#100D
                LOOP2: ACALL DELAY
                DJNZ 62,LOOP2
                SETB P2.0
		LJMP L1		

BOT_PLUS: 	MOV R0, #'+'	
		ACALL OPERATOR	
		ACALL DISPLAY	
		LJMP L1		

BOT_1: 		MOV R0, #'1'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_2: 		MOV R0, #'2'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_3: 		MOV R0, #'3'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_MINUS: 	MOV R0, #'-'	
		ACALL OPERATOR	
		ACALL DISPLAY	
		LJMP L1		

BOT_4: 		MOV R0, #'4'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_5: 		MOV R0, #'5'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_6: 		MOV R0, #'6'		
		ACALL NUM	
		ACALL DISPLAY
		LJMP L1		

BOT_MUL: 	MOV R0, #'*'	
		ACALL OPERATOR	
		ACALL DISPLAY	
		LJMP L1		

BOT_7: 		MOV R0, #'7'		
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_8: 		MOV R0, #'8'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_9: 		MOV R0, #'9'	
		ACALL NUM	
		ACALL DISPLAY	
		LJMP L1		

BOT_DIV: 	MOV R0, #'/'	
		ACALL OPERATOR	
		ACALL DISPLAY	
		LJMP L1		


DISPLAY:   
	MOV P1, R0	
	SETB RS    	
	SETB E     	
	CLR E 	
	M: MOV 62,#7D
        LOOP: ACALL DELAY
        DJNZ 62,LOOP
  	
	RET 		

COMMAND:   
	MOV P1, R0  	
	CLR RS     	
	SETB E  
	CLR E	
	MA: MOV 62,#7D
        LOOP1: ACALL DELAY
        DJNZ 62,LOOP1	
	RET    		


NUM: 
	JB NEW_NUM_FLAG, SEC_NUM
	JB FIRST_DIG_FLAG, FIRST_DIG	
	MOV A, R0		
	SUBB A, #30H		
	MOV R1, A		
	SETB FIRST_DIG_FLAG		
	RET			

FIRST_DIG: 
	MOV A, R0			
	MOV B, #10D			
	SUBB A, #30H			
	MOV R7, A			
	MOV A, R1			
	MUL AB				
	MOV R6, B 			
	CJNE R6, #00H, J_OVER_FLOW
	ADD A, R7			
	JC J_OVER_FLOW		
	MOV R1, A			
	SETB FIRST_DIG_FLAG		
	RET				
	
SEC_NUM:
	JB FIRST_DIG_FLAG, FIRST_DIG2	
	MOV A, R0		
	SUBB A, #30H		
	MOV R3, A		
	SETB FIRST_DIG_FLAG		
	RET			

FIRST_DIG2: 
	MOV A, R0		
	MOV B, #10D		
	SUBB A, #30H	
	MOV R7, A		
	MOV A, R3		
	MUL AB			
	MOV R6, B 		
	CJNE R6, #00H, J_OVER_FLOW	
	ADD A, R7			
	JC J_OVER_FLOW	
	MOV R3, A			
	SETB FIRST_DIG_FLAG		
	RET				

OPERATOR:
	SETB NEW_NUM_FLAG		
	CLR FIRST_DIG_FLAG		
	MOV A, R0		
	MOV R2, A		
	RET			


RESULT:
	CJNE R2, #'+', SUBTRACTION
	MOV A, R1			
	CLR C 				
	ADD A, R3			
	JC J_OVER_FLOW		
	MOV R5, #0H			
	MOV R4, A			
	LJMP PRINT			
SUBTRACTION: 
	CJNE R2, #'-', MULTIPLICATION	
	MOV A, R1			
	CLR C 				
	SUBB A, R3			
	JC J_OVER_FLOW		
	MOV R5, #0H			
	MOV R4, A			
	LJMP PRINT			
	
MULTIPLICATION:
	CJNE R2, #'*', DIVISION		
	MOV A, R1			
	MOV B, R3			
	MUL AB				
	MOV R7, B 			
	CJNE R7, #0H, OVER_FLOW		
	MOV R5, #0H			
	MOV R4, A			
	LJMP PRINT			
	
DIVISION:				
	MOV A, R1			
	MOV B, R3			
	DIV AB				
	MOV R4, A			
	MOV R5, B 			
	LJMP PRINT			

J_OVER_FLOW: 	LJMP OVER_FLOW		
		

PRINT:
	CJNE R3, #0D, NORMAL		
	CJNE R2, #'/', NORMAL		 
	MOV R0, #0C0H			
	ACALL COMMAND			
	MOV DPTR, #MSGERRO		
	CLR C				
	MOV R7, #0D			
NEXT:	MOV A, R7			
	MOVC A, @A+DPTR			
	MOV R0, A			
	ACALL DISPLAY			
	INC R7				
	JNZ NEXT			
	RET				
					
NORMAL:	MOV R7, #100D			
	CLR C 				
	SUBB A, R7			
	JC LESS_THAN100			
	MOV A, R4			
	MOV B, R7			
	DIV AB				
	ADD A, #30H			
	MOV R0, A			
	ACALL DISPLAY			
	MOV R4, B 						
	MOV A, B 			
	MOV R7, #10D			
	MOV B, R7			
	DIV AB				
	ADD A, #30H			
	MOV R0, A			
	ACALL DISPLAY			
	MOV A, B			
	ADD A, #30H			
	MOV R0, A			
	ACALL DISPLAY			
	CJNE R5, #00H, DECIMAL		
	RET
	
LESS_THAN100: MOV R7, #10D			
	CLR C 				
	MOV A, R4			
	SUBB A, R7			 
	JC LESS_THAN10			
	MOV A, R4			
	MOV B, R7			
	DIV AB				
	ADD A, #30H			
	MOV R0, A			
	ACALL DISPLAY			
	MOV A, B 			
	ADD A, #30H			
	MOV R0, A			
	ACALL DISPLAY			
	CJNE R5, #00H, DECIMAL		
	RET				

LESS_THAN10:
	MOV A, R4			
	ADD A, #30H			
	MOV R0, A			
	ACALL DISPLAY			
	CJNE R5, #00H, DECIMAL		
	RET				


OVER_FLOW:
	MOV R0, #0C0H		
	ACALL COMMAND		
	MOV DPTR, #MSGERRO2	
	CLR C			
	MOV R7, #0D		
NEXT2:	MOV A, R7		
	MOVC A, @A+DPTR		
	MOV R0, A		
	ACALL DISPLAY		
	JZ FINAL			
	INC R7			
	SJMP NEXT2		
FINAL:	
	RET			


DECIMAL: MOV R0, #'.'		
	ACALL DISPLAY		
	MOV A, R5		
	MOV B, #10D		
	MUL AB			
	MOV B, R3		
	DIV AB			
	ADD A, #30H		
	MOV R0, A		
	ACALL DISPLAY		
	RET			

DELAY: MOV TMOD,#00000001B
 MOV TH0,#03CH
 MOV TL0,#0AFH
 SETB TR0
HERE: JNB TF0,HERE
 CLR TR0
 CLR TF0
 RET

 


MSGERRO: DB 'ERROR: DIV BY 0',0		
MSGERRO2: DB 'OVERFLOW!',0		
	END				